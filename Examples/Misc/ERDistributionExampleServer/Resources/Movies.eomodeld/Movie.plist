{
    attributes = (
        {
            allowsNull = Y; 
            columnName = CATEGORY; 
            name = category; 
            prototypeName = varchar50; 
            width = 20; 
        }, 
        {
            allowsNull = Y; 
            columnName = "DATE_RELEASED"; 
            name = dateReleased; 
            prototypeName = date; 
        }, 
        {
            allowsNull = N; 
            columnName = "MOVIE_ID"; 
            name = movieID; 
            precision = 9; 
            prototypeName = id; 
        }, 
        {
            allowsNull = Y; 
            columnName = "POSTER_NAME"; 
            name = posterName; 
            prototypeName = varchar255; 
        }, 
        {allowsNull = Y; columnName = RATED; name = rated; prototypeName = varchar10; }, 
        {
            allowsNull = Y; 
            columnName = REVENUE; 
            name = revenue; 
            precision = 10; 
            prototypeName = currencyAmount; 
            scale = 2; 
        }, 
        {
            allowsNull = Y; 
            columnName = "STUDIO_ID"; 
            name = studioID; 
            prototypeName = id; 
        }, 
        {columnName = TITLE; name = title; prototypeName = varchar255; }, 
        {
            allowsNull = Y; 
            columnName = "TRAILER_NAME"; 
            name = trailerName; 
            prototypeName = varchar255; 
        }
    ); 
    attributesUsedForLocking = (
        title, 
        movieID, 
        dateReleased, 
        category, 
        revenue, 
        studioID, 
        posterName, 
        trailerName, 
        rated
    ); 
    className = "er.distribution.example.server.eo.Movie"; 
    classProperties = (
        category, 
        dateReleased, 
        title, 
        revenue, 
        posterName, 
        trailerName, 
        rated, 
        studio
    ); 
    externalName = MOVIE; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        "_clientClassPropertyNames" = (
            category, 
            dateReleased, 
            title, 
            revenue, 
            posterName, 
            trailerName, 
            rated, 
            studio
        ); 
        "_javaClientClassName" = "er.distribution.example.client.eo.Movie"; 
    }; 
    maxNumberOfInstancesToBatchFetch = 10; 
    name = Movie; 
    primaryKeyAttributes = (movieID); 
    relationships = (
        {
            definition = "toDirector.toTalent"; 
            joinSemantic = EOInnerJoin; 
            name = directors; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = PlotSummary; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = movieID; sourceAttribute = movieID; }); 
            name = plotSummary; 
            ownsDestination = Y; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = Review; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = movieID; sourceAttribute = movieID; }); 
            name = reviews; 
            ownsDestination = Y; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = MovieRole; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = movieID; sourceAttribute = movieID; }); 
            name = roles; 
            numberOfToManyFaultsToBatchFetch = 20; 
            ownsDestination = Y; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            destination = Studio; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = studioID; sourceAttribute = studioID; }); 
            name = studio; 
            numberOfToManyFaultsToBatchFetch = 0; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = Director; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = movieID; sourceAttribute = movieID; }); 
            name = toDirector; 
            ownsDestination = Y; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = Voting; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = movieID; sourceAttribute = movieID; }); 
            name = voting; 
            ownsDestination = Y; 
            propagatesPrimaryKey = Y; 
        }
    ); 
    storedProcedureNames = {}; 
}
